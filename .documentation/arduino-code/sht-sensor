#include <Wire.h>
#include <WiFiNINA.h>
#include <Adafruit_SHT31.h>

// WiFi Credentials
const char ssid[] = "ssid";
const char pass[] = "password";

// Static IP Configuration (Optional)
IPAddress local_IP(1, 1, 1, 0);     // IP-Adresse des Arduino 214
IPAddress gateway(1, 1, 1, 1);        // Gateway (Router-IP)
IPAddress subnet(255, 255, 255, 192);       // Subnetzmaske
IPAddress dns(8, 8, 8, 8);                // DNS-Server (Google DNS als Beispiel)


int status = WL_IDLE_STATUS; // WiFi Status
Adafruit_SHT31 sht31 = Adafruit_SHT31();
WiFiServer server(80);

unsigned long lastWiFiCheck = 0;
const unsigned long wifiCheckInterval = 3600000; // 1 hour

// Function to read sensor data
String getSensorData(String type) {

  float value = (type == "temperature") ? sht31.readTemperature() : sht31.readHumidity();

  return "{\"value\": " + String(value, 2) + "}";
}

// Send HTTP Response
void sendResponse(WiFiClient &client, String data) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: application/json");
  client.println("Connection: close");
  client.println();
  client.println(data);
}

// WiFi Reconnection
void checkWiFiConnection() {
  if (WiFi.status() == WL_CONNECTED) return;

  Serial.println("Reconnecting to WiFi...");
  WiFi.disconnect();
  WiFi.begin(ssid, pass);

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 30000) {
    Serial.print(".");
    delay(1000);
  }

  Serial.println(WiFi.status() == WL_CONNECTED ? "\nWiFi Reconnected!" : "\nFailed to reconnect.");
}

// Setup Function
void setup() {
  Serial.begin(115200);
  Wire.begin();

  if (!sht31.begin(0x44)) {
    Serial.println("SHT31 sensor not found!");
    while (1);
  }

  Serial.println("Connecting to WiFi...");
  WiFi.config(local_IP, gateway, subnet);
  while (status != WL_CONNECTED) {
    Serial.print("Connecting to: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
    delay(10000);
  }

  Serial.println("WiFi Connected! IP: " + WiFi.localIP().toString());
  server.begin();
}

// Main Loop
void loop() {
  if (millis() - lastWiFiCheck > wifiCheckInterval) {
    lastWiFiCheck = millis();
    checkWiFiConnection();
  }

  WiFiClient client = server.available();
  if (client) {
    Serial.println("New client connected");

    while (client.connected() && !client.available()) delay(1);
    String request = client.readStringUntil('\r');
    Serial.println("Request: " + request);

    if (request.startsWith("GET /measurements/humidity")) sendResponse(client, getSensorData("humidity"));
    else if (request.startsWith("GET /measurements/temperature")) sendResponse(client, getSensorData("temperature"));
    else {
      client.println("HTTP/1.1 404 Not Found");
      client.println("Content-Type: text/plain");
      client.println("Connection: close");
      client.println();
      client.println("404 Not Found");
    }

    client.stop();
    Serial.println("Client disconnected");
  }
}
